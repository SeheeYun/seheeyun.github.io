{"version":3,"sources":["webpack://gatsby-starter-blog/./src/templates/tags.js"],"names":["pageContext","data","location","siteTitle","site","siteMetadata","title","tag","allMarkdownRemark","edges","totalCount","tagHeader","style","listStyle","map","node","slug","fields","frontmatter","key","Link","to"],"mappings":"kLAqCA,UA9Ba,SAAC,GAAqC,IAAD,EAAlCA,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAC3BC,GAAY,UAAAF,EAAKG,KAAKC,oBAAV,eAAwBC,QAAxB,QACVC,EAAQP,EAARO,IACR,EAA8BN,EAAKO,kBAA3BC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,WACTC,EAAeD,EAAN,SACE,IAAfA,EAAmB,GAAK,KADX,iBAEEH,EAFF,IAIf,OACE,gBAAC,IAAD,CAAQL,SAAUA,EAAUI,MAAOH,GACjC,gBAAC,IAAD,CAAKG,MAAOC,IACZ,0BAAKI,GACL,sBAAIC,MAAO,CAAEC,UAAW,SACrBJ,EAAMK,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACJC,EAASD,EAAKE,OAAdD,KACAV,EAAUS,EAAKG,YAAfZ,MACR,OACE,sBAAIa,IAAKH,GACP,gBAAC,EAAAI,KAAD,CAAMC,GAAIL,GAAOV","file":"component---src-templates-tags-js-9f5d40af20ddcaa91fa5.js","sourcesContent":["import * as React from \"react\"\n// Components\nimport { Link, graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\nconst Tags = ({ pageContext, data, location }) => {\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const { tag } = pageContext\n  const { edges, totalCount } = data.allMarkdownRemark\n  const tagHeader = `${totalCount} post${\n    totalCount === 1 ? \"\" : \"s\"\n  } tagged with \"${tag}\"`\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <Seo title={tag} />\n      <h1>{tagHeader}</h1>\n      <ul style={{ listStyle: \"none\" }}>\n        {edges.map(({ node }) => {\n          const { slug } = node.fields\n          const { title } = node.frontmatter\n          return (\n            <li key={slug}>\n              <Link to={slug}>{title}</Link>\n            </li>\n          )\n        })}\n      </ul>\n      {/*\n              This links to a page that does not yet exist.\n              You'll come back to it!\n            */}\n    </Layout>\n  )\n}\nexport default Tags\n\nexport const pageQuery = graphql`\n  query($tag: String) {\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n          }\n        }\n      }\n    }\n    site {\n      siteMetadata {\n        title\n      }\n    }\n  }\n`\n"],"sourceRoot":""}