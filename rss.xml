<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[TIL: Today I Learned]]></title><description><![CDATA[A starter blog demonstrating what Gatsby can do.]]></description><link>https://seheeyun.github.io</link><generator>GatsbyJS</generator><lastBuildDate>Mon, 27 Sep 2021 15:26:00 GMT</lastBuildDate><item><title><![CDATA[React Hook과 클로저]]></title><description><![CDATA[React Hook과 클로저 useEffect를 컴포넌트 안에서 불러내는 이유는 무엇일까요? useEffect를 컴포넌트 내부에 둠으로써 effect를 통해 count state 변수(또는 그 어떤 prop…]]></description><link>https://seheeyun.github.io/React Hook과 클로저/</link><guid isPermaLink="false">https://seheeyun.github.io/React Hook과 클로저/</guid><pubDate>Wed, 15 Sep 2021 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;React Hook과 클로저&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;useEffect를 컴포넌트 안에서 불러내는 이유는 무엇일까요?&lt;/strong&gt; useEffect를 컴포넌트 내부에 둠으로써 effect를 통해 count state 변수(또는 그 어떤 prop에도)에 접근할 수 있게 됩니다. 함수 범위 안에 존재하기 때문에 특별한 API 없이도 값을 얻을 수 있는 것입니다. Hook은 자바스크립트의 &lt;strong&gt;클로저&lt;/strong&gt;를 이용하여 리액트에 한정된 API를 고안하는 것보다 자바스크립트가 이미 가지고 있는 방법을 이용하여 문제를 해결합니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;React 공식 문서를 보고있는데 계속 클로저가 언급된다. 알고보니,&lt;/p&gt;
&lt;p&gt;함수형 컴포넌트는 리액트 컴포넌트를 리턴하는 함수이고, 필요할 때마다 다시 함수를 호출하여 렌더링을 한다. 함수형 컴포넌트에서 상태관리를 하기 위해선 &lt;strong&gt;함수가 다시 실행됐을 때의 이전 상태를 기억하고 있어야하고, react hooks는 이를 위해 JS의 클로저를 활용&lt;/strong&gt;한 것이다.&lt;/p&gt;
&lt;p&gt;클로저란?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;클로저는 반환된 내부함수가 자신이 선언됐을 때의 환경(Lexical environment)인 스코프를 기억하여 자신이 선언됐을 때의 환경(스코프) 밖에서 호출되어도 그 환경(스코프)에 접근할 수 있는 함수&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;전역변수를 사용하지않고 어떤 변수의 값을 외부에 개입을 차단, 은닉해서 사용할수있는 함수&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;클로저는 내부함수가 유효한 상태에서 외부함수가 종료하여 외부함수의 실행 컨텍스트가 반환되어도(실행 컨텍스트 스택에서 사라진다는 말), 외부함수 실행 컨텍스트 내의 활성 객체(Activation object)(변수, 함수 선언 등의 정보를 가지고 있다)는 &lt;strong&gt;내부함수에 의해 참조되는 한 유효하여 내부함수가 스코프 체인을 통해 참조할 수 있는 것&lt;/strong&gt;을 의미한다.&lt;/p&gt;
&lt;p&gt;React hook에서는 useState를 통해 생성한 상태를 접근하고 유지하기 위해서 useState 바깥쪽에 state를 저장한다고한다.&lt;/p&gt;
&lt;p&gt;클로저의 개념을 공부할 때 체감으로 다가오는 예시가 없어서 잘 이해가 되지않았었는데 아주 가까이에서 사용되고있었다. 소름&lt;/p&gt;
&lt;h4&gt;도움 받은 글&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://hewonjeong.github.io/deep-dive-how-do-react-hooks-really-work-ko/&quot;&gt;https://hewonjeong.github.io/deep-dive-how-do-react-hooks-really-work-ko/&lt;/a&gt;
&lt;a href=&quot;https://yeoulcoding.tistory.com/149#recentEntries&quot;&gt;https://yeoulcoding.tistory.com/149#recentEntries&lt;/a&gt;
&lt;a href=&quot;https://velog.io/@ggong/useState-Hook%EA%B3%BC-%ED%81%B4%EB%A1%9C%EC%A0%80&quot;&gt;https://velog.io/@ggong/useState-Hook과-클로저&lt;/a&gt;
&lt;a href=&quot;https://poiemaweb.com/js-closure&quot;&gt;https://poiemaweb.com/js-closure&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[D3.js 사용하기]]></title><description><![CDATA[D3.js 사용하기 ui/ux나 비주얼에 관심이 많아서 어떤 라이브러리를 배워볼까 고민하다가 단순한 인터랙션이나 비주얼보단 의미있는, 좀 더 실용적인 시각화 라이브러리를 사용해보고 싶었고 data를 dom 요소로 매핑할 수 있는 D3(Data…]]></description><link>https://seheeyun.github.io/D3.js 사용하기/</link><guid isPermaLink="false">https://seheeyun.github.io/D3.js 사용하기/</guid><pubDate>Wed, 30 Jun 2021 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;D3.js 사용하기&lt;/h2&gt;
&lt;p&gt;ui/ux나 비주얼에 관심이 많아서 어떤 라이브러리를 배워볼까 고민하다가 단순한 인터랙션이나 비주얼보단 의미있는, 좀 더 실용적인 시각화 라이브러리를 사용해보고 싶었고 data를 dom 요소로 매핑할 수 있는 D3(Data Driven Documents)를 선택했다. D3는 단순히 차트를 만드는 것 외에도 다양한 활용이 가능하다.&lt;/p&gt;
&lt;h3&gt;특징&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;웹 표준에 가깝다.
D3.js는 웹 표준인 HTML, SVG, CSS를 사용해서 시각화 하기 때문에 최신 브라우저에서의 호환성을 보장한다. 특별한 api를 사용하지않아도 css를 사용해서 스타일링 할 수 있고 d3가 매핑하는 요소는 DOM 요소이기 때문에 브라우저에 내장된 툴로 디버깅하기도 쉽다.&lt;/li&gt;
&lt;li&gt;d3의 메서드들은 객체에 메서드를 수행하고 해당 객체를 반환한다. d3는 제이쿼리와 유사한 방식을 사용하여 메서드들을 연결하는 Method Chaining를 사용하고 이는 코드를 읽기쉽고 간결하게 만들어준다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;핵심 개념&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;d3.select(), d3.selectAll()&lt;/strong&gt;: 최상위 레벨의 메서드로, 요소를 선택한다. 이 메서드들은 셀렉터 문자열을 인자로 받는데, 지정한 문자열과 일치하는 요소가 없다면 빈 선택물을 반환한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;selection.data()&lt;/strong&gt;: 선택물에 data 배열을 연결해준다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;selection.enter()&lt;/strong&gt;: 연결해준 data에 선택물이 부족한 갯수 만큼 플레이스 홀더 역할을 하는 선택물을 반환한다. enter는 부족한 선택물의 참조만을 반환하므로 추가할 노드는 append()를 사용해서 추가한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;selection.exit()&lt;/strong&gt;: data의 수보다 현재 선택물의 DOM 요소가 많은 경우 그 남는 선택물을 반환한다. 보통 남는 선택물은 remove()를 사용해서 지워준다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;selection.attr()&lt;/strong&gt;: value 인자를 지정하면 선택한 모든 문서요소에서 지정한 속성명의 값으로 지정한다. value가 상수이면 모든 요소가 같은 속성값이 주어지지만 value가 함수이면 각 선택된 요소별로 순서대로 적용된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;d3는 동적인 그래프를 만들 수 있는데, 기존에는 General Update Pattern을 사용해서 데이터를 바인딩시키고 부족한 만큼 요소를 반환해서 추가해주고 병합시키는 방법을 사용했지만 새로 추가된 &lt;strong&gt;selection.join()&lt;/strong&gt;을 활용하면 위의 메서드들을 일일이 작성하지않고 한개의 메서드로 업데이트 시킬 수 있다.&lt;/p&gt;
&lt;p&gt;join()을 이용해서 만든 요소에 속성을 지정하려면, 원래의 방식(General Update Pattern)처럼 enter나 update뒤에 attr()를 추가하지말고 join() 메서드에만 뒤에 attr()를 붙여서 지정해준다. 이유는 join()이 엔터링되고 업데이트된 요소를 모두 반환하기때문이다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;useEffect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; svg &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;svgRef&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;current&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  svg
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;selectAll&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;circle&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;token parameter&quot;&gt;enter&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; enter&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;circle&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token parameter&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; update&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;class&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;updated&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token parameter&quot;&gt;exit&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; exit&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;r&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;cx&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; value &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;cy&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; value &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;stroke&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;red&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;join() 안에 exit.remove는 사실 디폴트로 적용되기때문에 따로 지정해줄 필요없다. 단, 애니메이션을 이용하기위에 따로 삭제해줘야하는 경우 적용해줄 수 있다.
update 콜백함수 또한 같은 이유로 지정해줄 필요가 없다.&lt;/p&gt;
&lt;p&gt;enter.append도 아래와 같이 간결하게 적어주면 된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;circle&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;결론적으로 위와 같이 심플한 한줄의 코드가 첫번째 로직과 같다는 것이다. 그것이 join()의 기능이다.&lt;/p&gt;
&lt;h3&gt;React와 함께&lt;/h3&gt;
&lt;p&gt;d3가 대부분을 처리하고 react는 step back해서 svg 요소를 제공하는 방식을 사용했다.
활용하기에따라 d3는 단순히 계산을 하고 계산된 값을 react가 렌더링하게 할 수 도있다.&lt;/p&gt;
&lt;h4&gt;도움 받은 글&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/d3/d3/wiki&quot;&gt;https://github.com/d3/d3/wiki&lt;/a&gt;
&lt;a href=&quot;https://github.com/zziuni/d3/wiki/API-Reference&quot;&gt;https://github.com/zziuni/d3/wiki/API-Reference&lt;/a&gt;
&lt;a href=&quot;https://mynameisdabin.tistory.com/15?category=786517&quot;&gt;https://mynameisdabin.tistory.com/15?category=786517&lt;/a&gt;
&lt;a href=&quot;https://velog.io/@smooth97/-Data-Visualizing-D3.js-%EB%9E%80&quot;&gt;https://velog.io/@smooth97/-Data-Visualizing-D3.js-란&lt;/a&gt;
&lt;a href=&quot;https://youtu.be/9uEmNgHzPhQ&quot;&gt;https://youtu.be/9uEmNgHzPhQ&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[210531]]></title><description><![CDATA[Today React Router 다른 페이지에 props 넘겨주기 어떤 페이지 컴포넌트에서 다른 페이지로 넘어갈때, 컴포넌트가 가지고있는 state를 props로 전달 해줘야하는 경우 Link나 useHistory hook…]]></description><link>https://seheeyun.github.io/210531/</link><guid isPermaLink="false">https://seheeyun.github.io/210531/</guid><pubDate>Mon, 31 May 2021 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;Today&lt;/h2&gt;
&lt;h3&gt;React Router 다른 페이지에 props 넘겨주기&lt;/h3&gt;
&lt;p&gt;어떤 페이지 컴포넌트에서 다른 페이지로 넘어갈때, 컴포넌트가 가지고있는 state를 props로 전달 해줘야하는 경우&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Link나 useHistory hook을 이용해서 객체를 전달해주고&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Link
  to&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    pathname&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/courses&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    search&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;?sort=name&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    hash&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;#the-hash&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    state&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; fromDashboard&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;

&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;button onClick&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;history&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  pathname&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/courses&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  state&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;fromDashboard&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;useLocation hook으로 해당 페이지의 정보를 불러온다&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; location &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useLocation&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;location&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;컴포넌트를 감싸는 Route 태그의 부모 요소인 BrowserRouter, Switch에 의해서 컴포넌트의 defaultProps 에는 history 객체가 들어가게 되고, 이 history 객체를 이용하여 리액트 어플리케이션 내에서 라우팅이 가능하다.&lt;br&gt;
react router hooks를 사용하면 각 객체에 쉽게 접근할 수 있다.&lt;/p&gt;
&lt;h4&gt;도움 받은 글&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://reactrouter.com/web/api/Link&quot;&gt;https://reactrouter.com/web/api/Link&lt;/a&gt;
&lt;a href=&quot;https://pythonq.com/so/reactjs/110304&quot;&gt;https://pythonq.com/so/reactjs/110304&lt;/a&gt;
&lt;a href=&quot;https://velog.io/@dhlee91/this.props.history.push%EB%A1%9C-props-%EB%84%98%EA%B2%A8%EC%A3%BC%EA%B8%B0&quot;&gt;https://velog.io/@dhlee91/this.props.history.push로-props-넘겨주기&lt;/a&gt;
&lt;a href=&quot;https://velog.io/@yiyb0603/React-Router-dom%EC%9D%98-%EC%9C%A0%EC%9A%A9%ED%95%9C-hooks%EB%93%A4&quot;&gt;https://velog.io/@yiyb0603/React-Router-dom의-유용한-hooks들&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;textarea 자동 높이 증가&lt;/h3&gt;
&lt;p&gt;처음엔 간단하게 scrollHeight에 따라 textarea의 height값이 늘어나는 로직을 작성했는데 layout shift가 계속해서 발생하고 화면에 떨림이 생겨서 다른 방법을 검색해보았다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://css-tricks.com/auto-growing-inputs-textareas/&quot;&gt;https://css-tricks.com/auto-growing-inputs-textareas/&lt;/a&gt;&lt;br&gt;
inline-grid, dataset 이용한 방법. enter를 입력해야지만 height값이 늘어나서 사용성 떨어짐&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Andarist/react-textarea-autosize#readme&quot;&gt;https://github.com/Andarist/react-textarea-autosize#readme&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;https://medium.com/@lucasalgus/creating-a-custom-auto-resize-textarea-component-for-your-react-web-application-6959c0ad68bc&quot;&gt;https://medium.com/@lucasalgus/creating-a-custom-auto-resize-textarea-component-for-your-react-web-application-6959c0ad68bc&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;직접 만들거나 라이브러리를 사용할 수도 있다.&lt;/p&gt;
&lt;p&gt;최종적으론 프로젝트에 적용되있는 metarial ui에 &lt;a href=&quot;https://material-ui.com/api/textarea-autosize/&quot;&gt;TextareaAutosize API&lt;/a&gt;가 있어서 이것을 사용했다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[210530]]></title><description><![CDATA[Today window.matchMedia() 컴포넌트의 크기를 js를 이용해서 동적으로 계산해주고 있을때, viewport크기에 따라 다른 수치를 주기위해 matchMedia 메서드 사용 Window.matchMedia…]]></description><link>https://seheeyun.github.io/210530/</link><guid isPermaLink="false">https://seheeyun.github.io/210530/</guid><pubDate>Sun, 30 May 2021 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;Today&lt;/h2&gt;
&lt;h3&gt;window.matchMedia()&lt;/h3&gt;
&lt;p&gt;컴포넌트의 크기를 js를 이용해서 동적으로 계산해주고 있을때, viewport크기에 따라 다른 수치를 주기위해 matchMedia 메서드 사용&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Window.matchMedia()&lt;/strong&gt; 메서드는 주어진 &lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/CSS/Media_Queries/Using_media_queries&quot;&gt;미디어 쿼리&lt;/a&gt; 문자열의 분석 결과를 나타내는 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList&quot;&gt;MediaQueryList&lt;/a&gt; 객체를 반환한다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MediaQueryList&lt;/strong&gt;는 특정 document에 적용된 media query에 관한 정보를 포함하는 객체이다. MediaQueryLIst는 matches, media 두 프로퍼티를 포함한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MediaQueryList.matches&lt;br&gt;
해당 document 가 주어진 미디어 쿼리를 만족하는지 여부로, boolean 값이다.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MediaQueryList.media&lt;br&gt;
주어진 미디어 쿼리를 string 으로 serialize 한 값이다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;직렬화: 데이터나 오브젝트를 동일하거나 다른 컴퓨터 환경에 저장하고 나중에 재구성할 수 있는 포맷으로 변환하는 과정이다. 반대로, 일련의 바이트로부터 데이터 구조를 추출하는 일은 역직렬화 deserialization)이라고 한다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;MediaQueryList는 미디어 쿼리에 관한 정보를 담고 있기 때문에 미디어 쿼리가 변경되면 change 이벤트를 발생시킬 수 있다. 이 change 이벤트를 핸들링하는 이벤틑 리스너를 추가해주면 주어진 미디어 쿼리를 충족하는지 watch 할 수 있고, 결과적으로 programmatic 하게 미디어 쿼리를 사용할 수 있다.&lt;/p&gt;
&lt;p&gt;프로젝트에 &lt;a href=&quot;https://ko.reactjs.org/docs/hooks-custom.html&quot;&gt;custom hook&lt;/a&gt;으로 만들어서 적용했다.&lt;/p&gt;
&lt;h4&gt;도움 받은 글&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://eunsukim.me/posts/how-to-use-media-query-with-javascript-matchmedia&quot;&gt;https://eunsukim.me/posts/how-to-use-media-query-with-javascript-matchmedia&lt;/a&gt;
&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/API/Window/matchMedia&quot;&gt;https://developer.mozilla.org/ko/docs/Web/API/Window/matchMedia&lt;/a&gt;
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList&lt;/a&gt;
&lt;a href=&quot;https://www.netlify.com/blog/2020/12/05/building-a-custom-react-media-query-hook-for-more-responsive-apps/&quot;&gt;https://www.netlify.com/blog/2020/12/05/building-a-custom-react-media-query-hook-for-more-responsive-apps/&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[210528]]></title><description><![CDATA[Today SQL, noSQL 스키마(Schema)  컴퓨터 과학에서 데이터베이스 스키마(database schema…]]></description><link>https://seheeyun.github.io/210528/</link><guid isPermaLink="false">https://seheeyun.github.io/210528/</guid><pubDate>Fri, 28 May 2021 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;Today&lt;/h2&gt;
&lt;h3&gt;SQL, noSQL&lt;/h3&gt;
&lt;h4&gt;스키마(Schema) &lt;/h4&gt;
&lt;p&gt;컴퓨터 과학에서 데이터베이스 스키마(database schema)는 데이터베이스에서 자료의 구조, 자료의 표현 방법, 자료 간의 관계를 형식 언어로 정의한 구조이다. 데이터베이스 관리 시스템(DBMS)이 주어진 설정에 따라 데이터베이스 스키마를 생성하며, 데이터베이스 사용자가 자료를 저장, 조회, 삭제, 변경할 때 DBMS는 자신이 생성한 데이터베이스 스키마를 참조하여 명령을 수행한다.&lt;/p&gt;
&lt;p&gt;데이터베이스의 구조와 제약조건에 관해 전반적인 명세를 기술한 것
개체의 특성을 나타내는 속성(Attribute)과 속성들의 집합으로 이루어진 개체(Entity), 개체 사이에 존재하는 관계(Relation)에 대한 정의와 이들이 유지해야 할 제약조건들을 기술한 것&lt;/p&gt;
&lt;p&gt;스키마는 3개의 구조로 나눠진다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;개념스키마(Conceptual Schema)&lt;/strong&gt;&lt;br&gt;
조직체 전체를 관장하는 입장에서 DB를 정의한 것
- 데이터 베이스의 전체적인 논리적 구조&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;내부스키마(Internal Schema)&lt;/strong&gt;&lt;br&gt;
물리적인 저장장치 입장에서 DB가 저장되는 방법을 기술한 것
- 데이터 베이스의 물리적 저장구조를 정의&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;외부스키마(External Schema, 서브 스키마)&lt;/strong&gt;&lt;br&gt;
사용자나 응용 프로그래머가 개인의 입장에서 필요한 데이터베이스의 논리적 구조를 정의
- 실세계에 존재하는 데이터들을 어떤 형식, 구조, 배치 화면을 통해 사용자에게 보여줄 것인가&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;SQL(관계형 데이터베이스)&lt;/h4&gt;
&lt;p&gt;SQL(Structured Query Language)은 관계형 데이터베이스 관리 시스템의 데이터를 관리하기 위해 설계된 특수 목적의 프로그래밍 언어이다. 관계형 데이터베이스 관리 시스템((RDBMS : relational database management system))에서 자료의 검색과 관리, 데이터베이스 스키마 생성과 수정, 데이터베이스 객체 접근 조정 관리를 위해 고안되었다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;데이터는 정해진(엄격한) 데이터 스키마(= structure)를 따라 데이터베이스 테이블에 저장 &gt; 명확하게 정의 된 스키마, 데이터 무결성 보장&lt;/li&gt;
&lt;li&gt;데이터는 관계를 통해서 연결된 여러개의 테이블에 분산. 데이터들을 여러개의 테이블에 나누어서, 데이터들의 중복을 피할 수 있다.&lt;/li&gt;
&lt;li&gt;관계를 맺고 있기 때문에, JOIN문이 많은 매우 복잡한 쿼리가 만들어 질 수 있다.&lt;/li&gt;
&lt;li&gt;수직적 확장(Vertical Scaling)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;NoSQL(비관계형 데이터베이스)&lt;/h4&gt;
&lt;p&gt;NoSQL 데이터베이스는 전통적인 관계형 데이터베이스 보다 덜 제한적인 일관성 모델을 이용하는 데이터의 저장 및 검색을 위한 매커니즘을 제공한다. 이러한 접근에 대한 동기에는 디자인의 단순화, 수평적 확장성, 세세한 통제를 포함한다. NoSQL 데이터베이스는 단순 검색 및 추가 작업을 위한 매우 최적화된 키 값 저장 공간으로, 레이턴시와 스루풋과 관련하여 상당한 성능 이익을 내는 것이 목적이다. NoSQL 데이터베이스는 빅데이터와 실시간 웹 애플리케이션의 상업적 이용에 널리 쓰인다. 또, NoSQL 시스템은 SQL 계열 쿼리 언어를 사용할 수 있다는 사실을 강조한다는 면에서 “Not only SQL”로 불리기도 한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;스키마 없음 &gt; 유연, 언제든지 저장된 데이터를 조정하고 새로운 “필드”를 추가 할 수 있다.&lt;/li&gt;
&lt;li&gt;관계형 모델을 사용하지 않으며 테이블 간 연결해서 조회할 수 있는 조인 기능이 없음&lt;/li&gt;
&lt;li&gt;조인을 하지않고 관련 데이터를 동일한 컬렉션에 넣기때문에 빠르지만 데이터가 중복 될 수 있다.&lt;/li&gt;
&lt;li&gt;데이터가 여러 컬렉션에 중복되어 있기 때문에, 수정(update)를 해야 하는 경우 모든 컬렉션에서 수행해야 함. (SQL은 중복된 데이터가 없기 때문에 한번만 수행)&lt;/li&gt;
&lt;li&gt;데이터는 애플리케이션이 필요로 하는 형식으로 저장, 데이터를 읽어오는 속도가 빠르다.&lt;/li&gt;
&lt;li&gt;수평적 확장(Horizontal Scaling)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;SQL은 언제 사용하는 것이 좋을까?&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;관계를 맺고 있는 데이터가 자주 변경(수정)되는 애플리케이션일 경우 (NoSQL에서라면 여러 컬렉션을 모두 수정해줘야 한다.)&lt;/li&gt;
&lt;li&gt;변경될 여지가 없고, 명확한 스키마가 사용자와 데이터에게 중요한 경우&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;NoSQL은 언제 사용하는 것이 좋을까?&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;정확한 데이터 구조를 알 수 없거나 변경 / 확장 될 수 있는 경우&lt;/li&gt;
&lt;li&gt;읽기(read)처리를 자주하지만, 데이터를 자주 변경(update)하지 않는 경우 (즉, 한번의 변경으로 수십 개의 문서를 업데이트 할 필요가 없는 경우)&lt;/li&gt;
&lt;li&gt;데이터베이스를 수평으로 확장해야 하는 경우 ( 즉, 막대한 양의 데이터를 다뤄야 하는 경우)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;도움 받은 글&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://jwprogramming.tistory.com/47&quot;&gt;https://jwprogramming.tistory.com/47&lt;/a&gt;
&lt;a href=&quot;https://jwprogramming.tistory.com/70?category=680195&quot;&gt;https://jwprogramming.tistory.com/70?category=680195&lt;/a&gt;
&lt;a href=&quot;https://siyoon210.tistory.com/130&quot;&gt;https://siyoon210.tistory.com/130&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Material UI Icons&lt;/h3&gt;
&lt;p&gt;원래 fontawesome을 사용하고 있었는데, free 아이콘 종류가 한정적이라 종류도 많고 다양한 스타일(Filled, Outlined, Rounded, Two tone, Sharp)을 지원해주는 Material UI을 사용해 보았다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;yarn add @material&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;ui&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;icons&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;core를 사용하지않고 있다면 core도 함께 설치&lt;/p&gt;
&lt;p&gt;사용법은 간단하다. &lt;a href=&quot;https://material-ui.com/components/material-icons/&quot;&gt;Material Icons&lt;/a&gt;에서 원하는 아이콘을 선택하고 해당 아이콘 컴포넌트를 import해주면 된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;HomeIcon color&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;secondary&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;HomeIcon color&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;action&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;HomeIcon color&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;disabled&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;HomeIcon style&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; color&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; green&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;

&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;HomeIcon fontSize&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;small&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;HomeIcon fontSize&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;large&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;HomeIcon style&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; fontSize&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;40&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;컴포넌트 속성을 이용해서 style을 지정해 줄 수 있다.&lt;/p&gt;
&lt;h4&gt;도움 받은 글&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://www.daleseo.com/material-ui-icons/&quot;&gt;https://www.daleseo.com/material-ui-icons/&lt;/a&gt;
&lt;a href=&quot;https://material-ui.com/components/icons/&quot;&gt;https://material-ui.com/components/icons/&lt;/a&gt;
&lt;a href=&quot;https://material-ui.com/guides/minimizing-bundle-size/#option-2&quot;&gt;https://material-ui.com/guides/minimizing-bundle-size/#option-2&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[210525]]></title><description><![CDATA[Today gitignore 캐시 삭제하기 .gitignore에 파일 추가 했는데 적용되지 않을 때 위의 명령어로 캐시 삭제해주고 add, commit하면 적용된다 도움 받은 글 https://webruden.tistory.com/134]]></description><link>https://seheeyun.github.io/210525/</link><guid isPermaLink="false">https://seheeyun.github.io/210525/</guid><pubDate>Tue, 25 May 2021 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;Today&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;gitignore 캐시 삭제하기&lt;/p&gt;
&lt;p&gt;.gitignore에 파일 추가 했는데 적용되지 않을 때&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;git rm -r --cached .&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위의 명령어로 캐시 삭제해주고 add, commit하면 적용된다&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;도움 받은 글&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://webruden.tistory.com/134&quot;&gt;https://webruden.tistory.com/134&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[210524]]></title><description><![CDATA[Today DNS, CDN 개념 정리 firebase 공식 문서 읽어보고 실습 card maker 프로젝트에 Firebase Authentication 적용
firebase 인증 추가해주고 ui는 따로 만들지않고 firebaseui…]]></description><link>https://seheeyun.github.io/210524/</link><guid isPermaLink="false">https://seheeyun.github.io/210524/</guid><pubDate>Mon, 24 May 2021 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;Today&lt;/h2&gt;
&lt;ul&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; DNS, CDN 개념 정리&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;
&lt;p&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; firebase 공식 문서 읽어보고 실습&lt;/p&gt;
&lt;p&gt;card maker 프로젝트에 Firebase Authentication 적용&lt;br&gt;
firebase 인증 추가해주고 ui는 따로 만들지않고 firebaseui 적용&lt;br&gt;
컴포넌트에서 start 메소드를 사용 할 수있게 export 해줌&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;startFirebaseUI&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;elementId&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
ui&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;elementId&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  signInOptions&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;firebase&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;auth&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;EmailAuthProvider&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;PROVIDER_ID&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// Other config options...&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; startFirebaseUI&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;도움 받은 글&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://firebase.google.com/docs/web/setup?hl=ko&amp;#x26;sdk_version=v8&quot;&gt;https://firebase.google.com/docs/web/setup?hl=ko&amp;#x26;sdk_version=v8&lt;/a&gt;
&lt;a href=&quot;https://firebase.google.com/docs/auth/web/firebaseui?hl=ko&quot;&gt;https://firebase.google.com/docs/auth/web/firebaseui?hl=ko&lt;/a&gt;
&lt;a href=&quot;https://firebaseopensource.com/projects/firebase/firebaseui-web/&quot;&gt;https://firebaseopensource.com/projects/firebase/firebaseui-web/&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Tomorrow&lt;/h2&gt;
&lt;ul&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; 모던 JavaScript 튜토리얼 (코드품질부터) 읽기&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; 프로그래머스 코테 입문&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; card maker 프로젝트 header, main, login ui 만들기&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[210523]]></title><description><![CDATA[내가 이루고픈 큰 목표를 위해선 작은 목표들과 그에 대한 실천이 선행되어야한다.
목표들을 달성하는데 동기부여를 하고 그 날 공부한 것을 되돌아보기위해 TIL…]]></description><link>https://seheeyun.github.io/210523/</link><guid isPermaLink="false">https://seheeyun.github.io/210523/</guid><pubDate>Sun, 23 May 2021 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;내가 이루고픈 큰 목표를 위해선 작은 목표들과 그에 대한 실천이 선행되어야한다.
목표들을 달성하는데 동기부여를 하고 그 날 공부한 것을 되돌아보기위해 TIL를 작성해보자!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;오늘 한 일과 배운것을 기록하면서 애매했던 개념들을 확실히 정리한다.&lt;/li&gt;
&lt;li&gt;간단하게 하루 동안 느낀점이나 생각을 정리한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Today&lt;/h2&gt;
&lt;h3&gt;GatsbyJS로 블로그 구현&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.gatsbyjs.com/docs/&quot;&gt;https://www.gatsbyjs.com/docs/&lt;/a&gt; 튜토리얼 &amp;#x26; 가이드&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;공식 문서가 잘 정리돼있고 &lt;a href=&quot;https://www.gatsbyjs.com/starters/?v=2&quot;&gt;Starters&lt;/a&gt;에서 이미 만들어져 있는 템플릿을 활용할 수 있어서 비교적 쉽게 구현할 수 있다.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://graphql.org/&quot;&gt;GraphQL&lt;/a&gt;은 처음 활용해 보는데, &lt;a href=&quot;https://www.electronjs.org/apps/graphiql&quot;&gt;GraphiQL&lt;/a&gt;를 이용해서 받아올 데이터를 미리 테스트해볼 수 있어서 접근성이 좋은것같다.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;gatsby는 배포하기전 &lt;code class=&quot;language-text&quot;&gt;빌드&lt;/code&gt; 시점에 소스들을 html로 렌더링하기때문에 &lt;code class=&quot;language-text&quot;&gt;배포&lt;/code&gt; 시 소스들이 변환되어져있다. 만들어둔 소스코드을 유지하기 위해 브랜치를 나눠서 사용한다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;빌드&lt;/strong&gt;: 소스 코드 파일을 컴퓨터나 휴대폰에서 실행할 수 있는 독립 소프트웨어 가공물로 변환하는 과정을 말하거나 그에 대한 결과물을 일컫는다. &lt;br&gt; &lt;strong&gt;배포&lt;/strong&gt;: 빌드가 완료된 실행파일을 사용자가 접근할 수 있는 환경에 배치하는 일&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;키워드를 이용해 글을 찾을 수 있도록 태그 기능을 추가했다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;도움 받은 글&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://velog.io/@magnoliarfsit/TIL-Session-Gatsby%EB%A1%9C-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%A7%8C%EB%93%A4%EA%B8%B0&quot;&gt;https://velog.io/@magnoliarfsit/TIL-Session-Gatsby로-블로그-만들기&lt;/a&gt;
&lt;a href=&quot;https://www.gatsbyjs.com/docs/adding-tags-and-categories-to-blog-posts/&quot;&gt;https://www.gatsbyjs.com/docs/adding-tags-and-categories-to-blog-posts/&lt;/a&gt;
&lt;a href=&quot;https://wayhome25.github.io/&quot;&gt;https://wayhome25.github.io/&lt;/a&gt;&lt;/p&gt;</content:encoded></item></channel></rss>