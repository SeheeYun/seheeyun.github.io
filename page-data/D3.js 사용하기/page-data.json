{"componentChunkName":"component---src-templates-blog-post-js","path":"/D3.js 사용하기/","result":{"data":{"site":{"siteMetadata":{"title":"Sehee Blog"}},"markdownRemark":{"id":"a13472a0-6097-58b5-a1f8-8c284cfa11a0","excerpt":"ui/ux나 비주얼에 관심이 많아서 어떤 라이브러리를 배워볼까 고민하다가 단순한 인터랙션이나 비주얼보단 의미있는, 좀 더 실용적인 시각화 라이브러리를 사용해보고 싶었고 data를 dom 요소로 매핑할 수 있는 D3(Data Driven Documents)를 선택했다. D…","html":"<p>ui/ux나 비주얼에 관심이 많아서 어떤 라이브러리를 배워볼까 고민하다가 단순한 인터랙션이나 비주얼보단 의미있는, 좀 더 실용적인 시각화 라이브러리를 사용해보고 싶었고 data를 dom 요소로 매핑할 수 있는 <strong>D3</strong>(Data Driven Documents)를 선택했다. D3는 단순히 차트를 만드는 것 외에도 다양한 활용이 가능하다.</p>\n<h3>특징</h3>\n<ul>\n<li>웹 표준에 가깝다.\nD3.js는 웹 표준인 <strong>HTML, SVG, CSS</strong>를 사용해서 시각화 하기 때문에 최신 브라우저에서의 호환성을 보장한다. 특별한 api를 사용하지않아도 css를 사용해서 스타일링 할 수 있고 d3가 매핑하는 요소는 DOM 요소이기 때문에 브라우저에 내장된 툴로 디버깅하기도 쉽다.</li>\n<li>d3의 메서드들은 객체에 메서드를 수행하고 해당 객체를 반환한다. d3는 제이쿼리와 유사한 방식을 사용하여 메서드들을 연결하는 <strong>Method Chaining</strong>를 사용하고 이는 코드를 읽기쉽고 간결하게 만들어준다.</li>\n</ul>\n<h3>핵심 개념</h3>\n<ul>\n<li><strong>d3.select(), d3.selectAll()</strong>: 최상위 레벨의 메서드로, 요소를 선택한다. 이 메서드들은 셀렉터 문자열을 인자로 받는데, 지정한 문자열과 일치하는 요소가 없다면 빈 선택물을 반환한다.</li>\n<li><strong>selection.data()</strong>: 선택물에 data 배열을 연결해준다.</li>\n<li><strong>selection.enter()</strong>: 연결해준 data에 선택물이 부족한 갯수 만큼 플레이스 홀더 역할을 하는 선택물을 반환한다. enter는 부족한 선택물의 참조만을 반환하므로 추가할 노드는 append()를 사용해서 추가한다.</li>\n<li><strong>selection.exit()</strong>: data의 수보다 현재 선택물의 DOM 요소가 많은 경우 그 남는 선택물을 반환한다. 보통 남는 선택물은 remove()를 사용해서 지워준다.</li>\n<li><strong>selection.attr()</strong>: value 인자를 지정하면 선택한 모든 문서요소에서 지정한 속성명의 값으로 지정한다. value가 상수이면 모든 요소가 같은 속성값이 주어지지만 value가 함수이면 각 선택된 요소별로 순서대로 적용된다.</li>\n</ul>\n<p>d3는 동적인 그래프를 만들 수 있는데, 기존에는 General Update Pattern을 사용해서 데이터를 바인딩시키고 부족한 만큼 요소를 반환해서 추가해주고 병합시키는 방법을 사용했지만 새로 추가된 <strong>selection.join()</strong>을 활용하면 위의 메서드들을 일일이 작성하지않고 한개의 메서드로 업데이트 시킬 수 있다.</p>\n<p>join()을 이용해서 만든 요소에 속성을 지정하려면, 원래의 방식(General Update Pattern)처럼 enter나 update뒤에 attr()를 추가하지말고 join() 메서드에만 뒤에 attr()를 붙여서 지정해준다. 이유는 join()이 엔터링되고 업데이트된 요소를 모두 반환하기때문이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> svg <span class=\"token operator\">=</span> <span class=\"token function\">select</span><span class=\"token punctuation\">(</span>svgRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span>\n  svg\n    <span class=\"token punctuation\">.</span><span class=\"token function\">selectAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"circle\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>\n      <span class=\"token parameter\">enter</span> <span class=\"token operator\">=></span> enter<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"circle\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token parameter\">update</span> <span class=\"token operator\">=></span> update<span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"class\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"updated\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token parameter\">exit</span> <span class=\"token operator\">=></span> exit<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"r\"</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">value</span> <span class=\"token operator\">=></span> value<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cx\"</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">value</span> <span class=\"token operator\">=></span> value <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cy\"</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">value</span> <span class=\"token operator\">=></span> value <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"stroke\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"red\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>join() 안에 exit.remove는 사실 디폴트로 적용되기때문에 따로 지정해줄 필요없다. 단, 애니메이션을 이용하기위에 따로 삭제해줘야하는 경우 적용해줄 수 있다.\nupdate 콜백함수 또한 같은 이유로 지정해줄 필요가 없다.</p>\n<p>enter.append도 아래와 같이 간결하게 적어주면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'circle'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>결론적으로 위와 같이 심플한 한줄의 코드가 첫번째 로직과 같다는 것이다. 그것이 join()의 기능이다.</p>\n<h3>React와 함께</h3>\n<p>d3가 대부분을 처리하고 react는 step back해서 svg 요소를 제공하는 방식을 사용했다.\n활용하기에따라 d3는 단순히 계산을 하고 계산된 값을 react가 렌더링하게 할 수 도있다.</p>\n<h4>도움 받은 글</h4>\n<p><a href=\"https://github.com/d3/d3/wiki\">https://github.com/d3/d3/wiki</a><br/>\n<a href=\"https://github.com/zziuni/d3/wiki/API-Reference\">https://github.com/zziuni/d3/wiki/API-Reference</a><br/>\n<a href=\"https://mynameisdabin.tistory.com/15?category=786517\">https://mynameisdabin.tistory.com/15?category=786517</a><br/>\n<a href=\"https://velog.io/@smooth97/-Data-Visualizing-D3.js-%EB%9E%80\">https://velog.io/@smooth97/-Data-Visualizing-D3.js-란</a><br/>\n<a href=\"https://youtu.be/9uEmNgHzPhQ\">https://youtu.be/9uEmNgHzPhQ</a></p>","frontmatter":{"title":"D3.js 사용하기","date":"June 30, 2021","description":null}},"previous":{"fields":{"slug":"/210531/"},"frontmatter":{"title":"210531"}},"next":{"fields":{"slug":"/React Hook과 클로저/"},"frontmatter":{"title":"React Hook과 클로저"}}},"pageContext":{"id":"a13472a0-6097-58b5-a1f8-8c284cfa11a0","previousPostId":"7ea1b571-3482-53e8-9c6f-aee24e8c724c","nextPostId":"a62447cf-f108-551e-bbca-a82f7884a801"}},"staticQueryHashes":["230163734","3589320610"]}