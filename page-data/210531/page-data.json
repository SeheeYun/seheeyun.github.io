{"componentChunkName":"component---src-templates-blog-post-js","path":"/210531/","result":{"data":{"site":{"siteMetadata":{"title":"TIL: Today I Learned"}},"markdownRemark":{"id":"7ea1b571-3482-53e8-9c6f-aee24e8c724c","excerpt":"Today React Router 다른 페이지에 props 넘겨주기 어떤 페이지 컴포넌트에서 다른 페이지로 넘어갈때, 컴포넌트가 가지고있는 state를 props로 전달 해줘야하는 경우 Link나 useHistory hook을 이용해서 객체를 전달해주고 useLocation hook…","html":"<h2>Today</h2>\n<h3>React Router 다른 페이지에 props 넘겨주기</h3>\n<p>어떤 페이지 컴포넌트에서 다른 페이지로 넘어갈때, 컴포넌트가 가지고있는 state를 props로 전달 해줘야하는 경우</p>\n<ol>\n<li>Link나 useHistory hook을 이용해서 객체를 전달해주고</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Link\n  to<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n    pathname<span class=\"token operator\">:</span> <span class=\"token string\">\"/courses\"</span><span class=\"token punctuation\">,</span>\n    search<span class=\"token operator\">:</span> <span class=\"token string\">\"?sort=name\"</span><span class=\"token punctuation\">,</span>\n    hash<span class=\"token operator\">:</span> <span class=\"token string\">\"#the-hash\"</span><span class=\"token punctuation\">,</span>\n    state<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> fromDashboard<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">/</span><span class=\"token operator\">></span>\n\n<span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>history<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  pathname<span class=\"token operator\">:</span> <span class=\"token string\">\"/courses\"</span><span class=\"token punctuation\">,</span>\n  state<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>fromDashboard<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>\n<ol start=\"2\">\n<li>useLocation hook으로 해당 페이지의 정보를 불러온다</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> location <span class=\"token operator\">=</span> <span class=\"token function\">useLocation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>location<span class=\"token punctuation\">)</span></code></pre></div>\n<p>컴포넌트를 감싸는 Route 태그의 부모 요소인 BrowserRouter, Switch에 의해서 컴포넌트의 defaultProps 에는 history 객체가 들어가게 되고, 이 history 객체를 이용하여 리액트 어플리케이션 내에서 라우팅이 가능하다.<br>\nreact router hooks를 사용하면 각 객체에 쉽게 접근할 수 있다.</p>\n<h4>도움 받은 글</h4>\n<p><a href=\"https://reactrouter.com/web/api/Link\">https://reactrouter.com/web/api/Link</a>\n<a href=\"https://pythonq.com/so/reactjs/110304\">https://pythonq.com/so/reactjs/110304</a>\n<a href=\"https://velog.io/@dhlee91/this.props.history.push%EB%A1%9C-props-%EB%84%98%EA%B2%A8%EC%A3%BC%EA%B8%B0\">https://velog.io/@dhlee91/this.props.history.push로-props-넘겨주기</a>\n<a href=\"https://velog.io/@yiyb0603/React-Router-dom%EC%9D%98-%EC%9C%A0%EC%9A%A9%ED%95%9C-hooks%EB%93%A4\">https://velog.io/@yiyb0603/React-Router-dom의-유용한-hooks들</a></p>\n<h3>textarea 자동 높이 증가</h3>\n<p>처음엔 간단하게 scrollHeight에 따라 textarea의 height값이 늘어나는 로직을 작성했는데 layout shift가 계속해서 발생하고 화면에 떨림이 생겨서 다른 방법을 검색해보았다.</p>\n<p><a href=\"https://css-tricks.com/auto-growing-inputs-textareas/\">https://css-tricks.com/auto-growing-inputs-textareas/</a><br>\ninline-grid, dataset 이용한 방법. enter를 입력해야지만 height값이 늘어나서 사용성 떨어짐</p>\n<p><a href=\"https://github.com/Andarist/react-textarea-autosize#readme\">https://github.com/Andarist/react-textarea-autosize#readme</a><br>\n<a href=\"https://medium.com/@lucasalgus/creating-a-custom-auto-resize-textarea-component-for-your-react-web-application-6959c0ad68bc\">https://medium.com/@lucasalgus/creating-a-custom-auto-resize-textarea-component-for-your-react-web-application-6959c0ad68bc</a></p>\n<p>직접 만들거나 라이브러리를 사용할 수도 있다.</p>\n<p>최종적으론 프로젝트에 적용되있는 metarial ui에 <a href=\"https://material-ui.com/api/textarea-autosize/\">TextareaAutosize API</a>가 있어서 이것을 사용했다.</p>","frontmatter":{"title":"210531","date":"May 31, 2021","description":null}},"previous":{"fields":{"slug":"/210530/"},"frontmatter":{"title":"210530"}},"next":null},"pageContext":{"id":"7ea1b571-3482-53e8-9c6f-aee24e8c724c","previousPostId":"721ba98a-1f4f-5ddf-975b-f116893748a4","nextPostId":null}},"staticQueryHashes":["230163734","3589320610"]}